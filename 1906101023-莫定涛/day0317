#节点类
class Node():
    def__init__(self):
        self.elem = va1
        self.next = None
#单链表
class SigleLink():
    def__init__(self,node = None):
        self.__head = node
        print(self.__head)

#判断链表是否为空
def is__empty(self):
    if self.__head == None:
        return True
    else:
        return False

    return self.__head == None
#获取链表的长度
def length(self):
    #cur游标，表示当前操作的节点
    cur = self.__head
   #统计有多少个节点
    count = 0
    while cur.next != None:
        count += 1
        cur = cur.next
    return count
#从尾部插入元素
def add__tail(self,val):
    node = Node(val)
    if self.is__empty:
        self.__head = node
    else:
        cur = self.__head
        while cur.next != None:
            cur = cur.next
        cur.next = node
#链表节点遍历
def travel(self):
    cur = self.__head
    while cur != None:
        print(cur.elem,end =' ')
        cur = cur.next

    print('')


#头插法
def add_top(self,val):
    node=Node(val)
    node.next=self.__head

#向列表中任意位置插入节点
def insert(self,pos,val):
    node=Node(val)
    cur=self.__head
    count=0
    while count < pos-1:
        count += 1
        cur = cur.next
    node.next = cur.next
    cur.next = node







if__name__=='__main__':
    s1=SigleLink()
    print(s1.is_empty())
    print(s1.length())
    s1.add_tail(10)
    s1.add_tail(20)
    s1.add_tail(30)
    print(s1.is_empty())
    print(s1.length())
    s1.travel()
    s1.add_top(40)
    s1.travel()
    s1.insert(2,100)
    s1.travel()
    print(s1.find(2))
    print(s1.search(20))
    

#根据下标查找节点
def find(self,pos):
    if pos < 0 or pos > self.length()-1:
        return 'error:index out of list'
    cur = self.__head
    count = 0
    while cur != None:
        if count == pos:
            return cur.elem
        else:
            count += 1
            cur = cur.next

#判断节点是否存在
def search(self,val):
    cur = self.__head
    while cur != None:
        if cur.elem == val:
            return True
        
    return False


